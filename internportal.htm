<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Intern Portal v2.0 - Advanced Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
        body { font-family: 'Inter', sans-serif; }
        
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .gradient-card {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }
        
        .gradient-success {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }
        
        .card-hover {
            transition: all 0.3s ease;
        }
        
        .card-hover:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        
        .pulse-animation {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        
        .loading-spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .glass-effect {
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .notification-enter {
            animation: slideInRight 0.3s ease-out;
        }
        
        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        .progress-ring {
            transform: rotate(-90deg);
        }
        
        .progress-ring-circle {
            transition: stroke-dashoffset 0.5s ease-in-out;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
    <!-- Enhanced Navigation -->
    <nav class="gradient-bg shadow-xl relative">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <div class="flex items-center space-x-4">
                    <div class="bg-white bg-opacity-20 p-2 rounded-lg">
                        <h1 class="text-white text-xl font-bold">🚀 Intern Portal</h1>
                    </div>
                    <div class="hidden md:block text-white text-sm bg-white bg-opacity-20 px-3 py-1 rounded-full">
                        <span id="liveTime"></span>
                    </div>
                </div>
                <div class="flex items-center space-x-2">
                    <button onclick="showPage('dashboard')" class="nav-btn text-white hover:bg-white hover:bg-opacity-20 px-4 py-2 rounded-lg text-sm font-medium transition-all">
                        📊 Dashboard
                    </button>
                    <button onclick="showPage('analytics')" class="nav-btn text-white hover:bg-white hover:bg-opacity-20 px-4 py-2 rounded-lg text-sm font-medium transition-all">
                        📈 Analytics
                    </button>
                    <button onclick="showPage('leaderboard')" class="nav-btn text-white hover:bg-white hover:bg-opacity-20 px-4 py-2 rounded-lg text-sm font-medium transition-all">
                        🏆 Leaderboard
                    </button>
                    <button onclick="showPage('tasks')" class="nav-btn text-white hover:bg-white hover:bg-opacity-20 px-4 py-2 rounded-lg text-sm font-medium transition-all">
                        ✅ Tasks
                    </button>
                    <div class="relative">
                        <button onclick="toggleUserMenu()" class="flex items-center space-x-2 bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-2 rounded-lg text-sm font-medium text-white transition-all">
                            <div class="w-8 h-8 bg-white bg-opacity-30 rounded-full flex items-center justify-center">
                                <span id="userInitials">U</span>
                            </div>
                            <span id="navUserName">User</span>
                        </button>
                        <div id="userMenu" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2 z-50">
                            <button onclick="showPage('profile')" class="block w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100">👤 Profile</button>
                            <button onclick="showPage('settings')" class="block w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100">⚙️ Settings</button>
                            <hr class="my-2">
                            <button onclick="showPage('login')" class="block w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100">🚪 Logout</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </nav>

    <!-- Login/Signup Page -->
    <div id="loginPage" class="hidden min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div class="max-w-md w-full space-y-8">
            <div class="text-center">
                <div class="mx-auto h-20 w-20 gradient-bg rounded-full flex items-center justify-center mb-4">
                    <span class="text-3xl">🚀</span>
                </div>
                <h2 class="mt-6 text-3xl font-extrabold text-gray-900">Intern Portal v2.0</h2>
                <p class="mt-2 text-sm text-gray-600">Advanced fundraising dashboard with analytics</p>
            </div>
            
            <div class="bg-white rounded-xl shadow-xl p-8">
                <div class="flex mb-6 bg-gray-100 rounded-lg p-1">
                    <button id="loginTab" onclick="switchTab('login')" class="flex-1 py-2 px-4 text-center font-medium rounded-md transition-all">Login</button>
                    <button id="signupTab" onclick="switchTab('signup')" class="flex-1 py-2 px-4 text-center font-medium rounded-md transition-all">Sign Up</button>
                </div>
                
                <form id="authForm" onsubmit="handleAuth(event)">
                    <div id="signupFields" class="hidden space-y-4 mb-4">
                        <input type="text" id="fullName" placeholder="Full Name" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                        <input type="text" id="university" placeholder="University" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    </div>
                    
                    <div class="space-y-4">
                        <input type="email" id="email" placeholder="Email address" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                        <input type="password" id="password" placeholder="Password" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    </div>
                    
                    <button type="submit" class="w-full mt-6 gradient-bg text-white py-3 px-4 rounded-lg hover:opacity-90 transition-opacity font-medium text-lg">
                        <span id="authButtonText">Sign In</span>
                        <div id="authSpinner" class="loading-spinner mx-auto hidden"></div>
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Enhanced Dashboard Page -->
    <div id="dashboardPage" class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Welcome Section with Live Stats -->
        <div class="mb-8 flex flex-col lg:flex-row lg:items-center lg:justify-between">
            <div>
                <h1 class="text-4xl font-bold text-gray-900 mb-2">
                    Welcome back, <span id="internName" class="text-purple-600">Loading...</span>! 👋
                </h1>
                <p class="text-gray-600 text-lg">Here's your real-time fundraising dashboard</p>
            </div>
            <div class="mt-4 lg:mt-0 flex items-center space-x-4">
                <div class="bg-white rounded-lg shadow-md px-4 py-2">
                    <span class="text-sm text-gray-500">Last updated:</span>
                    <span class="text-sm font-medium text-gray-900" id="lastUpdated">Just now</span>
                </div>
                <button onclick="refreshDashboard()" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                    🔄 Refresh
                </button>
            </div>
        </div>

        <!-- Enhanced Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <!-- Total Donations with Trend -->
            <div class="bg-white rounded-xl shadow-lg p-6 card-hover relative overflow-hidden">
                <div class="absolute top-0 right-0 w-20 h-20 gradient-success opacity-10 rounded-full -mr-10 -mt-10"></div>
                <div class="flex items-center justify-between mb-4">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Total Donations</p>
                        <p class="text-3xl font-bold text-green-600">$<span id="totalDonations">0</span></p>
                        <div class="flex items-center mt-1">
                            <span class="text-xs text-green-500 font-medium" id="donationTrend">+12% this week</span>
                        </div>
                    </div>
                    <div class="bg-green-100 p-3 rounded-full">
                        <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                        </svg>
                    </div>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                    <div class="bg-green-500 h-2 rounded-full transition-all duration-1000" id="donationProgress" style="width: 0%"></div>
                </div>
            </div>

            <!-- Referral Code with QR -->
            <div class="bg-white rounded-xl shadow-lg p-6 card-hover relative overflow-hidden">
                <div class="absolute top-0 right-0 w-20 h-20 gradient-bg opacity-10 rounded-full -mr-10 -mt-10"></div>
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Referral Code</p>
                        <p class="text-2xl font-bold text-purple-600" id="referralCode">Loading...</p>
                        <div class="flex items-center space-x-2 mt-2">
                            <button onclick="copyReferralCode()" class="text-xs bg-purple-100 text-purple-600 px-2 py-1 rounded-full hover:bg-purple-200 transition-colors">
                                📋 Copy
                            </button>
                            <button onclick="shareReferralCode()" class="text-xs bg-blue-100 text-blue-600 px-2 py-1 rounded-full hover:bg-blue-200 transition-colors">
                                📤 Share
                            </button>
                        </div>
                    </div>
                    <div class="bg-purple-100 p-3 rounded-full">
                        <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Current Rank with Movement -->
            <div class="bg-white rounded-xl shadow-lg p-6 card-hover relative overflow-hidden">
                <div class="absolute top-0 right-0 w-20 h-20 gradient-card opacity-10 rounded-full -mr-10 -mt-10"></div>
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Current Rank</p>
                        <div class="flex items-center space-x-2">
                            <p class="text-3xl font-bold text-orange-600">#<span id="currentRank">-</span></p>
                            <span class="text-xs bg-orange-100 text-orange-600 px-2 py-1 rounded-full" id="rankMovement">↗️ +2</span>
                        </div>
                        <p class="text-xs text-gray-500 mt-1">Out of <span id="totalParticipants">50</span> interns</p>
                    </div>
                    <div class="bg-orange-100 p-3 rounded-full">
                        <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"></path>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Weekly Goal Progress -->
            <div class="bg-white rounded-xl shadow-lg p-6 card-hover relative overflow-hidden">
                <div class="absolute top-0 right-0 w-20 h-20 bg-blue-500 opacity-10 rounded-full -mr-10 -mt-10"></div>
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Weekly Goal</p>
                        <p class="text-3xl font-bold text-blue-600">$<span id="weeklyGoal">500</span></p>
                        <p class="text-xs text-gray-500 mt-1"><span id="weeklyProgress">$320</span> raised this week</p>
                    </div>
                    <div class="relative">
                        <svg class="w-16 h-16 progress-ring">
                            <circle cx="32" cy="32" r="28" stroke="#e5e7eb" stroke-width="4" fill="transparent"/>
                            <circle id="weeklyProgressRing" cx="32" cy="32" r="28" stroke="#3b82f6" stroke-width="4" fill="transparent" 
                                    stroke-dasharray="175.929" stroke-dashoffset="175.929" class="progress-ring-circle"/>
                        </svg>
                        <div class="absolute inset-0 flex items-center justify-center">
                            <span class="text-sm font-bold text-blue-600" id="weeklyPercentage">64%</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Enhanced Rewards Section -->
        <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-2xl font-bold text-gray-900">🏆 Achievements & Rewards</h2>
                <div class="flex items-center space-x-2">
                    <span class="text-sm text-gray-500">Progress:</span>
                    <span class="text-sm font-medium text-purple-600" id="achievementProgress">4/8 unlocked</span>
                </div>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4" id="rewardsContainer">
                <!-- Rewards will be populated by JavaScript -->
            </div>
        </div>

        <!-- Quick Actions Panel -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <!-- Fundraising Progress Chart -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <h2 class="text-xl font-bold text-gray-900 mb-4">📈 Fundraising Progress</h2>
                <canvas id="progressChart" width="400" height="200"></canvas>
            </div>

            <!-- Recent Activity -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <h2 class="text-xl font-bold text-gray-900 mb-4">📋 Recent Activity</h2>
                <div class="space-y-4" id="recentActivity">
                    <!-- Activity items will be populated by JavaScript -->
                </div>
            </div>
        </div>
    </div>

    <!-- Analytics Page -->
    <div id="analyticsPage" class="hidden max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900 mb-2">📈 Advanced Analytics</h1>
            <p class="text-gray-600">Deep insights into your fundraising performance</p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <!-- Donation Trends -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <h2 class="text-xl font-bold text-gray-900 mb-4">Donation Trends (30 Days)</h2>
                <canvas id="donationTrendsChart" width="400" height="300"></canvas>
            </div>

            <!-- Performance Metrics -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <h2 class="text-xl font-bold text-gray-900 mb-4">Performance Metrics</h2>
                <canvas id="performanceChart" width="400" height="300"></canvas>
            </div>
        </div>

        <!-- Detailed Stats -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="bg-white rounded-xl shadow-lg p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">📊 Key Metrics</h3>
                <div class="space-y-3">
                    <div class="flex justify-between">
                        <span class="text-gray-600">Avg. Donation:</span>
                        <span class="font-semibold">$45.50</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-600">Conversion Rate:</span>
                        <span class="font-semibold">12.3%</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-600">Total Referrals:</span>
                        <span class="font-semibold">28</span>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">🎯 Goals</h3>
                <div class="space-y-3">
                    <div>
                        <div class="flex justify-between mb-1">
                            <span class="text-sm text-gray-600">Monthly Goal</span>
                            <span class="text-sm font-medium">78%</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div class="bg-blue-500 h-2 rounded-full" style="width: 78%"></div>
                        </div>
                    </div>
                    <div>
                        <div class="flex justify-between mb-1">
                            <span class="text-sm text-gray-600">Quarterly Goal</span>
                            <span class="text-sm font-medium">45%</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div class="bg-green-500 h-2 rounded-full" style="width: 45%"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">🏅 Achievements</h3>
                <div class="space-y-2">
                    <div class="flex items-center space-x-2">
                        <span class="text-green-500">✅</span>
                        <span class="text-sm">First $1000 raised</span>
                    </div>
                    <div class="flex items-center space-x-2">
                        <span class="text-green-500">✅</span>
                        <span class="text-sm">10 referrals milestone</span>
                    </div>
                    <div class="flex items-center space-x-2">
                        <span class="text-gray-400">⏳</span>
                        <span class="text-sm text-gray-500">Top 10 ranking</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Leaderboard Page -->
    <div id="leaderboardPage" class="hidden max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="mb-8 flex flex-col lg:flex-row lg:items-center lg:justify-between">
            <div>
                <h1 class="text-3xl font-bold text-gray-900 mb-2">🏆 Leaderboard</h1>
                <p class="text-gray-600">Real-time rankings of all interns</p>
            </div>
            <div class="mt-4 lg:mt-0 flex items-center space-x-4">
                <select class="bg-white border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500">
                    <option>All Time</option>
                    <option>This Month</option>
                    <option>This Week</option>
                </select>
                <button onclick="loadLeaderboard()" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                    🔄 Refresh
                </button>
            </div>
        </div>

        <!-- Top 3 Podium -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8" id="podium">
            <!-- Podium will be populated by JavaScript -->
        </div>

        <!-- Full Leaderboard -->
        <div class="bg-white rounded-xl shadow-lg overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
                <h2 class="text-lg font-semibold text-gray-900">Complete Rankings</h2>
            </div>
            <div class="divide-y divide-gray-200" id="leaderboardList">
                <!-- Leaderboard entries will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Tasks Page -->
    <div id="tasksPage" class="hidden max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900 mb-2">✅ Daily Tasks</h1>
            <p class="text-gray-600">Complete tasks to earn bonus points and rewards</p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Daily Tasks -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <h2 class="text-xl font-bold text-gray-900 mb-4">Today's Tasks</h2>
                    <div class="space-y-4" id="dailyTasks">
                        <!-- Tasks will be populated by JavaScript -->
                    </div>
                </div>
            </div>

            <!-- Task Progress -->
            <div class="space-y-6">
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Today's Progress</h3>
                    <div class="text-center">
                        <div class="relative inline-block">
                            <svg class="w-24 h-24 progress-ring">
                                <circle cx="48" cy="48" r="40" stroke="#e5e7eb" stroke-width="6" fill="transparent"/>
                                <circle id="taskProgressRing" cx="48" cy="48" r="40" stroke="#10b981" stroke-width="6" fill="transparent" 
                                        stroke-dasharray="251.327" stroke-dashoffset="251.327" class="progress-ring-circle"/>
                            </svg>
                            <div class="absolute inset-0 flex items-center justify-center">
                                <span class="text-xl font-bold text-green-600" id="taskPercentage">0%</span>
                            </div>
                        </div>
                        <p class="text-sm text-gray-600 mt-2">Tasks Completed</p>
                    </div>
                </div>

                <div class="bg-white rounded-xl shadow-lg p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Streak</h3>
                    <div class="text-center">
                        <div class="text-3xl font-bold text-orange-600 mb-2">🔥 7</div>
                        <p class="text-sm text-gray-600">Day streak</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Profile Page -->
    <div id="profilePage" class="hidden max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="bg-white rounded-xl shadow-lg overflow-hidden">
            <div class="gradient-bg px-6 py-8">
                <div class="flex items-center space-x-6">
                    <div class="w-24 h-24 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                        <span class="text-3xl font-bold text-white" id="profileInitials">AJ</span>
                    </div>
                    <div class="text-white">
                        <h1 class="text-3xl font-bold" id="profileName">Alex Johnson</h1>
                        <p class="text-lg opacity-90" id="profileEmail">alex@example.com</p>
                        <p class="opacity-75" id="profileUniversity">Stanford University</p>
                    </div>
                </div>
            </div>
            
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div>
                        <h2 class="text-xl font-bold text-gray-900 mb-4">Profile Information</h2>
                        <form class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                                <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500" value="Alex Johnson">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                                <input type="email" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500" value="alex@example.com">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">University</label>
                                <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500" value="Stanford University">
                            </div>
                            <button type="submit" class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                                Update Profile
                            </button>
                        </form>
                    </div>
                    
                    <div>
                        <h2 class="text-xl font-bold text-gray-900 mb-4">Statistics</h2>
                        <div class="space-y-4">
                            <div class="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                                <span class="text-gray-600">Member Since</span>
                                <span class="font-semibold">Jan 2025</span>
                            </div>
                            <div class="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                                <span class="text-gray-600">Total Donations</span>
                                <span class="font-semibold text-green-600">$2,750</span>
                            </div>
                            <div class="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                                <span class="text-gray-600">Referrals Made</span>
                                <span class="font-semibold">28</span>
                            </div>
                            <div class="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                                <span class="text-gray-600">Current Rank</span>
                                <span class="font-semibold text-orange-600">#3</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Settings Page -->
    <div id="settingsPage" class="hidden max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="bg-white rounded-xl shadow-lg p-6">
            <h1 class="text-3xl font-bold text-gray-900 mb-6">⚙️ Settings</h1>
            
            <div class="space-y-8">
                <div>
                    <h2 class="text-xl font-semibold text-gray-900 mb-4">Notifications</h2>
                    <div class="space-y-4">
                        <div class="flex items-center justify-between">
                            <div>
                                <h3 class="font-medium text-gray-900">Email Notifications</h3>
                                <p class="text-sm text-gray-600">Receive updates about your fundraising progress</p>
                            </div>
                            <label class="relative inline-flex items-center cursor-pointer">
                                <input type="checkbox" class="sr-only peer" checked>
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600"></div>
                            </label>
                        </div>
                        <div class="flex items-center justify-between">
                            <div>
                                <h3 class="font-medium text-gray-900">Push Notifications</h3>
                                <p class="text-sm text-gray-600">Get notified about new achievements and milestones</p>
                            </div>
                            <label class="relative inline-flex items-center cursor-pointer">
                                <input type="checkbox" class="sr-only peer" checked>
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600"></div>
                            </label>
                        </div>
                    </div>
                </div>
                
                <div>
                    <h2 class="text-xl font-semibold text-gray-900 mb-4">Privacy</h2>
                    <div class="space-y-4">
                        <div class="flex items-center justify-between">
                            <div>
                                <h3 class="font-medium text-gray-900">Show on Leaderboard</h3>
                                <p class="text-sm text-gray-600">Display your name and progress on the public leaderboard</p>
                            </div>
                            <label class="relative inline-flex items-center cursor-pointer">
                                <input type="checkbox" class="sr-only peer" checked>
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600"></div>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Enhanced Backend API with more features
        class InternPortalAPIv2 {
            constructor() {
                this.users = [
                    { 
                        id: 1, name: "Alex Johnson", email: "alex@example.com", university: "Stanford University",
                        referralCode: "alex2025", donationsRaised: 2750, rank: 3, weeklyRaised: 320,
                        joinDate: "2025-01-01", totalReferrals: 28, conversionRate: 12.3
                    },
                    { 
                        id: 2, name: "Sarah Chen", email: "sarah@example.com", university: "MIT",
                        referralCode: "sarah2025", donationsRaised: 4200, rank: 1, weeklyRaised: 450,
                        joinDate: "2025-01-01", totalReferrals: 35, conversionRate: 15.8
                    },
                    { 
                        id: 3, name: "Mike Rodriguez", email: "mike@example.com", university: "UC Berkeley",
                        referralCode: "mike2025", donationsRaised: 3100, rank: 2, weeklyRaised: 380,
                        joinDate: "2025-01-01", totalReferrals: 22, conversionRate: 11.2
                    },
                    { 
                        id: 4, name: "Emma Davis", email: "emma@example.com", university: "Harvard",
                        referralCode: "emma2025", donationsRaised: 1850, rank: 4, weeklyRaised: 280,
                        joinDate: "2025-01-01", totalReferrals: 18, conversionRate: 9.5
                    },
                    { 
                        id: 5, name: "James Wilson", email: "james@example.com", university: "Yale",
                        referralCode: "james2025", donationsRaised: 1200, rank: 5, weeklyRaised: 150,
                        joinDate: "2025-01-01", totalReferrals: 12, conversionRate: 8.1
                    }
                ];
                
                this.rewards = [
                    { id: 1, name: "First Steps", description: "Made your first donation", threshold: 50, icon: "🎯", unlocked: true },
                    { id: 2, name: "Getting Started", description: "Raised $100", threshold: 100, icon: "🚀", unlocked: true },
                    { id: 3, name: "Rising Star", description: "Raised $500", threshold: 500, icon: "⭐", unlocked: true },
                    { id: 4, name: "Fundraising Hero", description: "Raised $1,000", threshold: 1000, icon: "🦸", unlocked: true },
                    { id: 5, name: "Top Performer", description: "Raised $2,500", threshold: 2500, icon: "🏆", unlocked: true },
                    { id: 6, name: "Champion", description: "Raised $5,000", threshold: 5000, icon: "👑", unlocked: false },
                    { id: 7, name: "Legend", description: "Raised $10,000", threshold: 10000, icon: "🌟", unlocked: false },
                    { id: 8, name: "Hall of Fame", description: "Raised $25,000", threshold: 25000, icon: "🏛️", unlocked: false }
                ];
                
                this.tasks = [
                    { id: 1, title: "Share your referral code", description: "Share on social media", completed: true, points: 50 },
                    { id: 2, title: "Send 3 personal messages", description: "Reach out to friends and family", completed: true, points: 100 },
                    { id: 3, title: "Update your profile", description: "Add a profile picture and bio", completed: false, points: 25 },
                    { id: 4, title: "Check the leaderboard", description: "See how you're ranking", completed: true, points: 10 },
                    { id: 5, title: "Complete fundraising training", description: "Watch the training video", completed: false, points: 75 }
                ];
                
                this.activities = [
                    { type: "donation", message: "New $50 donation received", time: "2 hours ago", icon: "💰" },
                    { type: "referral", message: "John Smith used your referral code", time: "4 hours ago", icon: "👥" },
                    { type: "achievement", message: "Unlocked 'Top Performer' achievement", time: "1 day ago", icon: "🏆" },
                    { type: "rank", message: "Moved up to rank #3", time: "2 days ago", icon: "📈" }
                ];
                
                this.currentUser = this.users[0];
            }

            async delay(ms = 800) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }

            async getUserProfile() {
                await this.delay();
                return { success: true, data: this.currentUser };
            }

            async getUserRewards() {
                await this.delay();
                const userAmount = this.currentUser.donationsRaised;
                const updatedRewards = this.rewards.map(reward => ({
                    ...reward,
                    unlocked: userAmount >= reward.threshold
                }));
                return { success: true, data: updatedRewards };
            }

            async getLeaderboard() {
                await this.delay();
                const sortedUsers = [...this.users].sort((a, b) => b.donationsRaised - a.donationsRaised);
                return { success: true, data: sortedUsers };
            }

            async getDailyTasks() {
                await this.delay();
                return { success: true, data: this.tasks };
            }

            async getRecentActivity() {
                await this.delay();
                return { success: true, data: this.activities };
            }

            async login(email, password) {
                await this.delay();
                const user = this.users.find(u => u.email === email);
                if (user) {
                    this.currentUser = user;
                    return { success: true, data: user };
                }
                return { success: false, message: "Invalid credentials" };
            }

            async signup(name, email, password, university) {
                await this.delay();
                const newUser = {
                    id: this.users.length + 1,
                    name: name,
                    email: email,
                    university: university || "Unknown University",
                    referralCode: name.toLowerCase().replace(/\s+/g, '') + '2025',
                    donationsRaised: 0,
                    rank: this.users.length + 1,
                    weeklyRaised: 0,
                    joinDate: new Date().toISOString().split('T')[0],
                    totalReferrals: 0,
                    conversionRate: 0
                };
                
                this.users.push(newUser);
                this.currentUser = newUser;
                return { success: true, data: newUser };
            }
        }

        // Initialize enhanced API
        const api = new InternPortalAPIv2();
        let currentPage = 'dashboard';
        let currentAuthMode = 'login';
        let progressChart, donationTrendsChart, performanceChart;

        // Enhanced Page Navigation
        function showPage(page) {
            // Hide all pages
            const pages = ['loginPage', 'dashboardPage', 'analyticsPage', 'leaderboardPage', 'tasksPage', 'profilePage', 'settingsPage'];
            pages.forEach(p => document.getElementById(p).classList.add('hidden'));
            
            // Update nav buttons
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('bg-white', 'bg-opacity-30');
            });
            
            // Show selected page
            if (page === 'login') {
                document.getElementById('loginPage').classList.remove('hidden');
            } else {
                document.getElementById(page + 'Page').classList.remove('hidden');
                
                // Load page-specific data
                switch(page) {
                    case 'dashboard':
                        loadDashboard();
                        break;
                    case 'analytics':
                        loadAnalytics();
                        break;
                    case 'leaderboard':
                        loadLeaderboard();
                        break;
                    case 'tasks':
                        loadTasks();
                        break;
                    case 'profile':
                        loadProfile();
                        break;
                }
            }
            
            currentPage = page;
            hideUserMenu();
        }

        // User menu toggle
        function toggleUserMenu() {
            const menu = document.getElementById('userMenu');
            menu.classList.toggle('hidden');
        }

        function hideUserMenu() {
            document.getElementById('userMenu').classList.add('hidden');
        }

        // Enhanced Auth Tab Switching
        function switchTab(mode) {
            currentAuthMode = mode;
            const loginTab = document.getElementById('loginTab');
            const signupTab = document.getElementById('signupTab');
            const signupFields = document.getElementById('signupFields');
            const authButtonText = document.getElementById('authButtonText');
            
            if (mode === 'login') {
                loginTab.classList.add('bg-purple-600', 'text-white');
                loginTab.classList.remove('text-gray-700');
                signupTab.classList.add('text-gray-700');
                signupTab.classList.remove('bg-purple-600', 'text-white');
                signupFields.classList.add('hidden');
                authButtonText.textContent = 'Sign In';
            } else {
                signupTab.classList.add('bg-purple-600', 'text-white');
                signupTab.classList.remove('text-gray-700');
                loginTab.classList.add('text-gray-700');
                loginTab.classList.remove('bg-purple-600', 'text-white');
                signupFields.classList.remove('hidden');
                authButtonText.textContent = 'Create Account';
            }
        }

        // Enhanced Authentication
        async function handleAuth(event) {
            event.preventDefault();
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const fullName = document.getElementById('fullName').value;
            const university = document.getElementById('university').value;
            
            document.getElementById('authButtonText').classList.add('hidden');
            document.getElementById('authSpinner').classList.remove('hidden');
            
            try {
                let result;
                if (currentAuthMode === 'login') {
                    result = await api.login(email, password);
                } else {
                    result = await api.signup(fullName, email, password, university);
                }
                
                if (result.success) {
                    updateUserInfo(result.data);
                    showPage('dashboard');
                    showNotification('Welcome to Intern Portal v2.0! 🎉', 'success');
                } else {
                    showNotification(result.message || 'Authentication failed', 'error');
                }
            } catch (error) {
                showNotification('Something went wrong. Please try again.', 'error');
            } finally {
                document.getElementById('authButtonText').classList.remove('hidden');
                document.getElementById('authSpinner').classList.add('hidden');
            }
        }

        // Update user info in navigation
        function updateUserInfo(user) {
            const initials = user.name.split(' ').map(n => n[0]).join('');
            document.getElementById('userInitials').textContent = initials;
            document.getElementById('navUserName').textContent = user.name.split(' ')[0];
        }

        // Enhanced Dashboard Loading
        async function loadDashboard() {
            try {
                const [profileResult, rewardsResult, activityResult] = await Promise.all([
                    api.getUserProfile(),
                    api.getUserRewards(),
                    api.getRecentActivity()
                ]);
                
                if (profileResult.success) {
                    const user = profileResult.data;
                    document.getElementById('internName').textContent = user.name;
                    document.getElementById('totalDonations').textContent = user.donationsRaised.toLocaleString();
                    document.getElementById('referralCode').textContent = user.referralCode;
                    document.getElementById('currentRank').textContent = user.rank;
                    document.getElementById('weeklyGoal').textContent = '500';
                    document.getElementById('weeklyProgress').textContent = '$' + user.weeklyRaised;
                    
                    // Update progress bars
                    const donationProgress = Math.min((user.donationsRaised / 5000) * 100, 100);
                    document.getElementById('donationProgress').style.width = donationProgress + '%';
                    
                    const weeklyProgress = Math.min((user.weeklyRaised / 500) * 100, 100);
                    document.getElementById('weeklyPercentage').textContent = Math.round(weeklyProgress) + '%';
                    updateCircularProgress('weeklyProgressRing', weeklyProgress);
                    
                    updateUserInfo(user);
                }

                if (rewardsResult.success) {
                    displayRewards(rewardsResult.data);
                }

                if (activityResult.success) {
                    displayRecentActivity(activityResult.data);
                }

                createProgressChart();
                updateLastUpdated();
            } catch (error) {
                showNotification('Failed to load dashboard data', 'error');
            }
        }

        // Display enhanced rewards
        function displayRewards(rewards) {
            const container = document.getElementById('rewardsContainer');
            container.innerHTML = '';
            
            const unlockedCount = rewards.filter(r => r.unlocked).length;
            document.getElementById('achievementProgress').textContent = `${unlockedCount}/${rewards.length} unlocked`;
            
            rewards.forEach(reward => {
                const rewardElement = document.createElement('div');
                rewardElement.className = `p-4 rounded-xl border-2 transition-all card-hover ${
                    reward.unlocked 
                        ? 'border-green-200 bg-gradient-to-br from-green-50 to-green-100' 
                        : 'border-gray-200 bg-gray-50'
                }`;
                
                rewardElement.innerHTML = `
                    <div class="text-center">
                        <div class="text-4xl mb-3 ${reward.unlocked ? 'animate-bounce' : 'grayscale opacity-50'}">${reward.icon}</div>
                        <h3 class="font-bold text-sm ${reward.unlocked ? 'text-green-800' : 'text-gray-600'} mb-1">${reward.name}</h3>
                        <p class="text-xs ${reward.unlocked ? 'text-green-600' : 'text-gray-500'} mb-3">${reward.description}</p>
                        ${reward.unlocked 
                            ? '<span class="inline-block px-3 py-1 bg-green-500 text-white text-xs rounded-full font-medium">Unlocked ✓</span>'
                            : `<span class="inline-block px-3 py-1 bg-gray-200 text-gray-600 text-xs rounded-full font-medium">$${reward.threshold.toLocaleString()}</span>`
                        }
                    </div>
                `;
                
                container.appendChild(rewardElement);
            });
        }

        // Display recent activity
        function displayRecentActivity(activities) {
            const container = document.getElementById('recentActivity');
            container.innerHTML = '';
            
            activities.forEach(activity => {
                const activityElement = document.createElement('div');
                activityElement.className = 'flex items-center space-x-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors';
                
                activityElement.innerHTML = `
                    <div class="text-2xl">${activity.icon}</div>
                    <div class="flex-1">
                        <p class="text-sm font-medium text-gray-900">${activity.message}</p>
                        <p class="text-xs text-gray-500">${activity.time}</p>
                    </div>
                `;
                
                container.appendChild(activityElement);
            });
        }

        // Create progress chart
        function createProgressChart() {
            const ctx = document.getElementById('progressChart').getContext('2d');
            
            if (progressChart) {
                progressChart.destroy();
            }
            
            progressChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Current'],
                    datasets: [{
                        label: 'Donations Raised',
                        data: [500, 1200, 1800, 2300, 2750],
                        borderColor: '#8b5cf6',
                        backgroundColor: 'rgba(139, 92, 246, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '$' + value;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Load analytics page
        async function loadAnalytics() {
            createDonationTrendsChart();
            createPerformanceChart();
        }

        // Create donation trends chart
        function createDonationTrendsChart() {
            const ctx = document.getElementById('donationTrendsChart').getContext('2d');
            
            if (donationTrendsChart) {
                donationTrendsChart.destroy();
            }
            
            donationTrendsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
                    datasets: [{
                        label: 'Weekly Donations',
                        data: [500, 700, 600, 950],
                        backgroundColor: 'rgba(59, 130, 246, 0.8)',
                        borderColor: '#3b82f6',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '$' + value;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Create performance chart
        function createPerformanceChart() {
            const ctx = document.getElementById('performanceChart').getContext('2d');
            
            if (performanceChart) {
                performanceChart.destroy();
            }
            
            performanceChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Donations', 'Referrals', 'Social Shares'],
                    datasets: [{
                        data: [65, 25, 10],
                        backgroundColor: ['#10b981', '#8b5cf6', '#f59e0b'],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        // Enhanced leaderboard with podium
        async function loadLeaderboard() {
            try {
                const result = await api.getLeaderboard();
                if (result.success) {
                    displayPodium(result.data.slice(0, 3));
                    displayLeaderboard(result.data);
                }
            } catch (error) {
                showNotification('Failed to load leaderboard', 'error');
            }
        }

        // Display top 3 podium
        function displayPodium(topThree) {
            const container = document.getElementById('podium');
            container.innerHTML = '';
            
            const positions = [1, 0, 2]; // Second, First, Third for visual arrangement
            const heights = ['h-32', 'h-40', 'h-28'];
            const colors = ['bg-gray-400', 'bg-yellow-400', 'bg-orange-400'];
            
            positions.forEach((index, pos) => {
                if (topThree[index]) {
                    const user = topThree[index];
                    const isCurrentUser = user.id === api.currentUser.id;
                    
                    const podiumElement = document.createElement('div');
                    podiumElement.className = `text-center ${pos === 1 ? 'order-1' : pos === 0 ? 'order-2' : 'order-3'}`;
                    
                    podiumElement.innerHTML = `
                        <div class="bg-white rounded-xl shadow-lg p-6 mb-4 ${isCurrentUser ? 'ring-4 ring-purple-500' : ''}">
                            <div class="w-16 h-16 ${colors[index]} rounded-full flex items-center justify-center mx-auto mb-3">
                                <span class="text-2xl font-bold text-white">${user.name.split(' ').map(n => n[0]).join('')}</span>
                            </div>
                            <h3 class="font-bold text-lg ${isCurrentUser ? 'text-purple-600' : 'text-gray-900'}">${user.name}</h3>
                            <p class="text-2xl font-bold text-green-600">$${user.donationsRaised.toLocaleString()}</p>
                            <p class="text-sm text-gray-500">${user.university}</p>
                        </div>
                        <div class="${colors[index]} ${heights[index]} rounded-t-lg flex items-end justify-center pb-4">
                            <span class="text-4xl font-bold text-white">${index + 1}</span>
                        </div>
                    `;
                    
                    container.appendChild(podiumElement);
                }
            });
        }

        // Enhanced leaderboard display
        function displayLeaderboard(users) {
            const container = document.getElementById('leaderboardList');
            container.innerHTML = '';
            
            users.forEach((user, index) => {
                const isCurrentUser = user.id === api.currentUser.id;
                const position = index + 1;
                
                const userElement = document.createElement('div');
                userElement.className = `px-6 py-4 flex items-center justify-between hover:bg-gray-50 transition-colors ${
                    isCurrentUser ? 'bg-purple-50 border-l-4 border-purple-500' : ''
                }`;
                
                let rankIcon = '';
                if (position === 1) rankIcon = '🥇';
                else if (position === 2) rankIcon = '🥈';
                else if (position === 3) rankIcon = '🥉';
                else rankIcon = `#${position}`;
                
                userElement.innerHTML = `
                    <div class="flex items-center space-x-4">
                        <div class="text-2xl font-bold ${position <= 3 ? '' : 'text-gray-600'}">${rankIcon}</div>
                        <div class="w-12 h-12 bg-gradient-to-br from-purple-400 to-blue-500 rounded-full flex items-center justify-center">
                            <span class="text-white font-bold">${user.name.split(' ').map(n => n[0]).join('')}</span>
                        </div>
                        <div>
                            <h3 class="font-semibold ${isCurrentUser ? 'text-purple-800' : 'text-gray-900'}">${user.name} ${isCurrentUser ? '(You)' : ''}</h3>
                            <p class="text-sm text-gray-600">${user.university}</p>
                            <p class="text-xs text-gray-500">Code: ${user.referralCode}</p>
                        </div>
                    </div>
                    <div class="text-right">
                        <p class="text-xl font-bold text-green-600">$${user.donationsRaised.toLocaleString()}</p>
                        <p class="text-sm text-gray-500">${user.totalReferrals} referrals</p>
                        <p class="text-xs text-gray-400">${user.conversionRate}% conversion</p>
                    </div>
                `;
                
                container.appendChild(userElement);
            });
        }

        // Load tasks page
        async function loadTasks() {
            try {
                const result = await api.getDailyTasks();
                if (result.success) {
                    displayTasks(result.data);
                    updateTaskProgress(result.data);
                }
            } catch (error) {
                showNotification('Failed to load tasks', 'error');
            }
        }

        // Display tasks
        function displayTasks(tasks) {
            const container = document.getElementById('dailyTasks');
            container.innerHTML = '';
            
            tasks.forEach(task => {
                const taskElement = document.createElement('div');
                taskElement.className = `flex items-center space-x-4 p-4 rounded-lg border-2 transition-all ${
                    task.completed ? 'border-green-200 bg-green-50' : 'border-gray-200 bg-white hover:border-purple-200'
                }`;
                
                taskElement.innerHTML = `
                    <div class="flex-shrink-0">
                        <input type="checkbox" ${task.completed ? 'checked' : ''} 
                               class="w-5 h-5 text-purple-600 rounded focus:ring-purple-500" 
                               onchange="toggleTask(${task.id})">
                    </div>
                    <div class="flex-1">
                        <h3 class="font-semibold ${task.completed ? 'text-green-800 line-through' : 'text-gray-900'}">${task.title}</h3>
                        <p class="text-sm ${task.completed ? 'text-green-600' : 'text-gray-600'}">${task.description}</p>
                    </div>
                    <div class="flex-shrink-0">
                        <span class="inline-block px-3 py-1 ${task.completed ? 'bg-green-100 text-green-800' : 'bg-purple-100 text-purple-800'} text-sm font-medium rounded-full">
                            +${task.points} pts
                        </span>
                    </div>
                `;
                
                container.appendChild(taskElement);
            });
        }

        // Update task progress
        function updateTaskProgress(tasks) {
            const completedTasks = tasks.filter(t => t.completed).length;
            const totalTasks = tasks.length;
            const percentage = (completedTasks / totalTasks) * 100;
            
            document.getElementById('taskPercentage').textContent = Math.round(percentage) + '%';
            updateCircularProgress('taskProgressRing', percentage);
        }

        // Toggle task completion
        function toggleTask(taskId) {
            const task = api.tasks.find(t => t.id === taskId);
            if (task) {
                task.completed = !task.completed;
                loadTasks();
                showNotification(task.completed ? 'Task completed! 🎉' : 'Task unmarked', 'success');
            }
        }

        // Load profile page
        function loadProfile() {
            const user = api.currentUser;
            document.getElementById('profileName').textContent = user.name;
            document.getElementById('profileEmail').textContent = user.email;
            document.getElementById('profileUniversity').textContent = user.university;
            document.getElementById('profileInitials').textContent = user.name.split(' ').map(n => n[0]).join('');
        }

        // Utility functions
        function updateCircularProgress(elementId, percentage) {
            const circle = document.getElementById(elementId);
            const radius = circle.r.baseVal.value;
            const circumference = 2 * Math.PI * radius;
            const offset = circumference - (percentage / 100) * circumference;
            
            circle.style.strokeDasharray = circumference;
            circle.style.strokeDashoffset = offset;
        }

        function updateLastUpdated() {
            const now = new Date();
            document.getElementById('lastUpdated').textContent = now.toLocaleTimeString();
        }

        function updateLiveTime() {
            const now = new Date();
            document.getElementById('liveTime').textContent = now.toLocaleTimeString();
        }

        // Enhanced utility functions
        function refreshDashboard() {
            showNotification('Refreshing dashboard...', 'info');
            loadDashboard();
        }

        function copyReferralCode() {
            const referralCode = document.getElementById('referralCode').textContent;
            navigator.clipboard.writeText(referralCode).then(() => {
                showNotification('Referral code copied! 📋', 'success');
            }).catch(() => {
                showNotification('Failed to copy referral code', 'error');
            });
        }

        function shareReferralCode() {
            const referralCode = document.getElementById('referralCode').textContent;
            const shareText = `Join me in fundraising! Use my referral code: ${referralCode}`;
            
            if (navigator.share) {
                navigator.share({
                    title: 'Intern Portal Referral',
                    text: shareText,
                    url: window.location.href
                });
            } else {
                navigator.clipboard.writeText(shareText).then(() => {
                    showNotification('Share text copied to clipboard! 📤', 'success');
                });
            }
        }

        // Enhanced notification system
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-6 py-4 rounded-lg shadow-xl z-50 notification-enter max-w-sm ${
                type === 'success' ? 'bg-green-500 text-white' :
                type === 'error' ? 'bg-red-500 text-white' :
                type === 'warning' ? 'bg-yellow-500 text-white' :
                'bg-blue-500 text-white'
            }`;
            
            notification.innerHTML = `
                <div class="flex items-center space-x-2">
                    <span>${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white hover:text-gray-200">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }

        // Initialize the enhanced app
        document.addEventListener('DOMContentLoaded', function() {
            showPage('dashboard');
            switchTab('login');
            
            // Update live time every second
            setInterval(updateLiveTime, 1000);
            updateLiveTime();
            
            // Close user menu when clicking outside
            document.addEventListener('click', function(event) {
                const userMenu = document.getElementById('userMenu');
                const userButton = event.target.closest('button');
                
                if (!userButton || !userButton.onclick || userButton.onclick.toString().indexOf('toggleUserMenu') === -1) {
                    hideUserMenu();
                }
            });
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'969fd0e5e250a8b0',t:'MTc1NDMyODk3Ni4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
